name: media

networks:
  media-net:
    driver: bridge

services:
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
    volumes:
      - /datapool/config/sonarr:/config
      - /datapool:/datapool
    ports:
      - "8989:8989"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
    volumes:
      - /datapool/config/radarr:/config
      - /datapool:/datapool
    ports:
      - "7878:7878"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
    volumes:
      - /datapool/config/bazarr:/config
      - /datapool:/datapool
    ports:
      - "6767:6767"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6767/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
      # NVIDIA GPU environment variables for hardware acceleration
      # TESTED & VERIFIED: These are all required for GPU transcoding in unprivileged LXC
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      # Library path for CUDA libraries (required for GPU transcoding in unprivileged LXC)
      - LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/nvidia/current:/usr/lib/x86_64-linux-gnu
    volumes:
      - /datapool/config/jellyfin:/config
      - /datapool:/datapool
      # CRITICAL: Manual CUDA library mounting for unprivileged LXC containers
      # nvidia-container-runtime doesn't work properly in unprivileged LXC, so we mount libs directly
      # This bypasses the runtime and provides direct access to CUDA libraries
      # TESTED & VERIFIED: All three library mounts are required for GPU transcoding
      - /usr/lib/x86_64-linux-gnu/nvidia/current:/usr/lib/x86_64-linux-gnu/nvidia/current:ro
      - /usr/lib/x86_64-linux-gnu/libnvidia-encode.so.1:/usr/lib/x86_64-linux-gnu/libnvidia-encode.so.1:ro
      - /usr/lib/x86_64-linux-gnu/libnvcuvid.so.1:/usr/lib/x86_64-linux-gnu/libnvcuvid.so.1:ro
    devices:
      # Direct device mounting for NVIDIA GPU (GTX 970)
      # This approach works better than 'runtime: nvidia' in unprivileged LXC containers
      # Provides hardware transcoding: decode (cuvid) -> scale (cuda) -> encode (nvenc)
      # TESTED & VERIFIED: All five devices are required - DO NOT REMOVE ANY
      # Test results: 447 fps (18.64x real-time) transcoding with full GPU pipeline
      - /dev/nvidia0:/dev/nvidia0              # GPU device
      - /dev/nvidiactl:/dev/nvidiactl          # GPU control device
      - /dev/nvidia-modeset:/dev/nvidia-modeset      # Mode setting
      - /dev/nvidia-uvm:/dev/nvidia-uvm        # CRITICAL for CUDA initialization
      - /dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools  # CUDA tools
    ports:
      - "8096:8096"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    depends_on:
      - jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
    volumes:
      - /datapool/config/jellyseerr:/app/config
    dns:
      - 8.8.8.8
    ports:
      - "5055:5055"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5055"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
      - WEBUI_PORT=8080
    volumes:
      - /datapool/config/qbittorrent:/config
      - /datapool:/datapool
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
    volumes:
      - /datapool/config/prowlarr:/config
    ports:
      - "9696:9696"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9696/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=flaresolverr
      - TZ=Europe/Istanbul
      - PUID=1000
      - PGID=1000
      - UMASK=002
    ports:
      - "8191:8191"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8191/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  recyclarr:
    image: recyclarr/recyclarr:latest
    container_name: recyclarr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
    volumes:
      - /datapool/config/recyclarr:/config
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Immich services - versions must match official compose:
  # https://raw.githubusercontent.com/immich-app/immich/main/docker/docker-compose.yml
  immich-server:
    container_name: immich-server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    user: "1000:1000"
    volumes:
      - ${UPLOAD_LOCATION}:/data
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - "2283:2283"
    depends_on:
      - redis
      - database
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2283/api/server-info/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  immich-machine-learning:
    container_name: immich-machine-learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}-cuda
    user: "1000:1000"
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    devices:
      - /dev/nvidia0:/dev/nvidia0
      - /dev/nvidiactl:/dev/nvidiactl
      - /dev/nvidia-modeset:/dev/nvidia-modeset
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3003/ping', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    container_name: immich-redis
    image: docker.io/valkey/valkey:8@sha256:81db6d39e1bba3b3ff32bd3a1b19a6d69690f94a3954ec131277b9a26b95b3aa
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - media-net
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  database:
    container_name: immich-database
    image: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0@sha256:bcf63357191b76a916ae5eb93464d65c07511da41e3bf7a8416db519b40b1c23
    user: "1000:1000"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    shm_size: 128mb
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8082:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    environment:
      - TZ=${TZ:-Europe/Istanbul}
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'
    networks:
      - media-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  promtail:
    image: grafana/promtail:latest
    container_name: promtail-media
    restart: unless-stopped
    network_mode: "host"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
      - /etc/promtail:/etc/promtail:ro
      - /var/lib/promtail/positions:/var/lib/promtail/positions:rw
    command: -config.file=/etc/promtail/promtail.yml
    environment:
      - TZ=${TZ:-Europe/Istanbul}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower-media
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ:-Europe/Istanbul}
      - WATCHTOWER_CLEANUP=true
      - PUID=1000
      - PGID=1000
      - UMASK=002
    command: ["--schedule", "0 0 2,8,14,20 * * *"]
    networks:
      - media-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cleanuperr:
    image: ghcr.io/cleanuparr/cleanuparr:latest
    container_name: cleanuperr
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Europe/Istanbul
      - PORT=11011
      - BASE_PATH=
    volumes:
      - /datapool/config/cleanuperr:/config
      - /datapool:/datapool
    ports:
      - "11011:11011"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11011"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-net
    restart: unless-stopped
    depends_on:
      - sonarr
      - radarr
      - qbittorrent
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  model-cache: